version: '3.8'

services:
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9997:9997"
    environment:
      # KRaft mode configuration (no Zookeeper needed!)
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      
      # Topic and replication settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      
      # Auto-create topics
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      
      # JMX for monitoring
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
      
      # Performance tuning
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_MS: 3600000  # 1 hour retention for bridge messages
      
      # KRaft cluster metadata
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bridge_network

  bridge1:
    build: .
    environment:
      PORT: 8081
      STORAGE_TYPE: "kafka"
      KAFKA_BROKERS: "kafka:29092"
      KAFKA_TOPIC: "bridge-messages"
      KAFKA_CONSUMER_GROUP: "bridge-consumer-1"
      CORS_ENABLE: "true"
      HEARTBEAT_INTERVAL: 10
      RPS_LIMIT: 1000
      CONNECTIONS_LIMIT: 200
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - bridge_network
    restart: unless-stopped

  bridge2:
    build: .
    environment:
      PORT: 8081
      STORAGE_TYPE: "kafka"
      KAFKA_BROKERS: "kafka:29092"
      KAFKA_TOPIC: "bridge-messages"
      KAFKA_CONSUMER_GROUP: "bridge-consumer-2"
      CORS_ENABLE: "true"
      HEARTBEAT_INTERVAL: 10
      RPS_LIMIT: 1000
      CONNECTIONS_LIMIT: 200
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - bridge_network
    restart: unless-stopped

  bridge3:
    build: .
    environment:
      PORT: 8081
      STORAGE_TYPE: "kafka"
      KAFKA_BROKERS: "kafka:29092"
      KAFKA_TOPIC: "bridge-messages"
      KAFKA_CONSUMER_GROUP: "bridge-consumer-3"
      CORS_ENABLE: "true"
      HEARTBEAT_INTERVAL: 10
      RPS_LIMIT: 1000
      CONNECTIONS_LIMIT: 200
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - bridge_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - bridge1
      - bridge2
      - bridge3
    networks:
      - bridge_network
    restart: unless-stopped

  # Kafka UI for monitoring (now without Zookeeper dependency)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      # No Zookeeper configuration needed for KRaft mode
    networks:
      - bridge_network

volumes:
  kafka_data:
    driver: local

networks:
  bridge_network:
    driver: bridge
